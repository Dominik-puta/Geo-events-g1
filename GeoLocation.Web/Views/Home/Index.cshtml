@using GeoLocation.Model
@model List<Event>

@{var counter = 0;}

<div class="index-container">

    <form>
        <div style="width: 100%; margin-bottom: 30px">
            <input type="text" class="searchbox" name="searchString" id="searchString" placeholder="Pretražite po naslovu" />
        </div>
    </form>
    <div class="map-search-container">
        <form novalidate>
            <input type="number" name="lat" id="lat" hidden />
            <input type="number" name="lng" id="lng" hidden />
            <div class="map-search-text">Pretražite događaje u krugu</div>
            <input class="map-search-input" type="number" name="radius" id="radius" />
            <div class="map-search-text">km</div>
            <button class="btn btn-primary map-search-button">Kreni</button>
            <div id="map"></div>
            <input type="submit" value="submit" hidden />
        </form>
    </div>
    <button class="btn btn-primary clear-searches-btn" onclick="location.href = '@(Url.Action("Index", "Home"))'">Očisti pretraživanja</button>
    <div class="row">
        @foreach (var item in Model)
    {
        if (counter != 0 && counter % 2 == 0)
        {
                @:</div>
                @:<div class="row">
            }

            var base64 = Convert.ToBase64String(item.Image.ImageFile);
            var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
            <div class="col-md-6">
                <div class="thumbnail">
                    <img src='@imgSrc' />
                    <div class="caption">
                        <h3>@item.Name</h3>
                        <p>@item.Description</p>
                        <div><img src="~/images/location_on - material.png" style="width: 12px; height: 12px;"/> @item.VenueName</div>
                        <div><img src="~/images/baseline_date_range_black_18dp.png" style="width: 12px; height: 12px;"/> @item.StartDate.ToString("dd/MM/yyyy HH:mm") - @item.EndDate.ToString("dd/MM/yyyy HH:mm")</div>
                        @if (item.EventStatus.Abrv == "Upcoming")
                        {
                            <span style="color: deepskyblue">●</span>
                        }
                        else if (item.EventStatus.Abrv == "Ended")
                        {
                            <span style="color: red">●</span>
                        }
                        else if (item.EventStatus.Abrv == "Now")
                        {
                            <span style="color: lawngreen">●</span>
                        }
                        <span> @item.EventStatus.Name</span>
                        <div class="btn-container">
                        <a class="btn btn-primary" onclick="location.href = '@(Url.Action("EventDetails", "Home", new EventDetailsViewModel { EventId = item.Id }))'">Detalji</a>
                        <a class="btn btn-danger" asp-controller="Home" asp-action="DeleteEvent" asp-route-id='@item.Id'>Obriši</a>
                        <a class="btn btn-default" asp-controller="Home" asp-action="Update" asp-route-id='@item.Id'>Uredi</a>
                        </div>
                    </div>
                </div>
            </div>

            counter++;
        }
    </div>
</div>

<script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-core.js"></script>
<script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-service.js"></script>
<script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-ui.js"></script>
<script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
<script>
    var platform = new H.service.Platform({
        app_id: 'djjwJitUsSXrdRYlUse2',
        app_code: '00VX2XyikFomgHBCZwDrRw',
        useHTTPS: true
    });
    var pixelRatio = window.devicePixelRatio || 1;
    var defaultLayers = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });
    var map = new H.Map(document.getElementById('map'),
        defaultLayers.normal.map, {
            center: { lat: 45.5519216, lng: 18.6866134 },
            zoom: 8,
            pixelRatio: pixelRatio
        });
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
    var ui = H.ui.UI.createDefault(map, defaultLayers);

    var marker = new H.map.Marker({ lat: 45.5519216, lng: 18.6866134 });
    // Ensure that the marker can receive drag events
    marker.draggable = true;
    map.addObject(marker);
    var position = marker.getPosition();
    document.getElementById("lat").value = position.lat;
    document.getElementById("lng").value = position.lng;

    // disable the default draggability of the underlying map
    // when starting to drag a marker object:
    map.addEventListener('dragstart', function (ev) {
        var target = ev.target;
        if (target instanceof H.map.Marker) {
            behavior.disable();
        }
    }, false);


    // re-enable the default draggability of the underlying map
    // when dragging has completed
    map.addEventListener('dragend', function (ev) {
        var target = ev.target;
        if (target instanceof mapsjs.map.Marker) {
            behavior.enable();
            position = target.getPosition();
            document.getElementById("lat").value = position.lat;
            document.getElementById("lng").value = position.lng;
        }
    }, false);

    // Listen to the drag event and move the position of the marker
    // as necessary
    map.addEventListener('drag', function (ev) {
        var target = ev.target,
            pointer = ev.currentPointer;
        if (target instanceof mapsjs.map.Marker) {
            target.setPosition(map.screenToGeo(pointer.viewportX, pointer.viewportY));
        }
    }, false);
</script>
